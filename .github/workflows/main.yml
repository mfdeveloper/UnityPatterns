name: Unity Package CI
on:
  push:
    branches:
    - upm-package-embedded
  repository_dispatch:
    types: [on-demand-test]
env:
  PKG_BRANCH: upm
  PKG_NAME: com.mfdeveloper.unitypatterns
jobs:
  split-upm:
    name: Create upm branch (force)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set output git tag and commit message
        id: vars
        run: |
          echo ::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))
          echo ::set-output name=commit_message::$(git log -1 --pretty=%B)
      - name: Check output git variables
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          COMMIT_MESSAGE: ${{ steps.vars.outputs.commit_message }}
        run: |
          echo $RELEASE_VERSION
          echo $COMMIT_MESSAGE
      - name: Checkout orphan [${{ env.PKG_BRANCH }}] branch
        run: |
          git checkout --orphan "$PKG_BRANCH"
          shopt -s extglob dotglob
          rm -rf !(Packages|.github|.git|.|..)
          ls -la ./
      - name: Move ./Packages content to root
        run: |
          shopt -s extglob dotglob
          cp -rvf "Packages/$PKG_NAME/." ./
          rm -rf ./Packages
      - name: Create samples~ and ~documentation folders
        run: |
          RELEASE_VERSION=${{ steps.vars.outputs.tag }}
          COMMIT_MESSAGE="${{ steps.vars.outputs.commit_message }}"
          [[ "$RELEASE_VERSION" =~ (.*[^0-9])([0-9]+)$ ]] && RELEASE_VERSION="${BASH_REMATCH[1]}$((${BASH_REMATCH[2]} + 1))";
          
          echo "New version: $RELEASE_VERSION"
          
          if [[ -d "Samples" ]]; then
            mv Samples Samples~
            rm -f Samples.meta
          fi
          if [[ -d "Documentation" ]]; then
            mv Documentation Documentation~
            rm -f Documentation.meta
          fi
          git config --global user.name 'github-bot'
          git config --global user.email 'github-bot@users.noreply.github.com'
          git add .
          git commit --allow-empty -am "$COMMIT_MESSAGE"
          
          echo $RELEASE_VERSION > VERSION.md
          git add VERSION.md
          git commit -am "fix: Samples => Samples~ and commit a new version: $RELEASE_VERSION"
          git push -f -u origin "$PKG_BRANCH"
